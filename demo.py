# This sample code uses for test app pages
#coding=utf-8
#!/usr/bin/env python

from appium import webdriver
import time
import unittest
import logging
import HtmlTestRunner  # output to HTML report


class forecastPageTest(unittest.TestCase):

	def setUp(self):
		desired_caps = {}
		desired_caps["platformName"] = "Android"
		desired_caps["deviceName"] = "HUAWEI"
		desired_caps["platformVersion"] = "7.0"
		desired_caps["appPackage"]="com.android.MyObservatory"
		desired_caps["appActivity"]=".MyObservatory"
		desired_caps["unicodeKeyboadr"]= True
		desired_caps["resetKeyboard"]= True
		
		self.driver = webdriver.Remote("http://127.0.0.1:4723/wd/hub",desired_caps)
		time.sleep(3)
	
	def tearDown(self):
		self.driver.quit()  # logout application
		
	def get_size(self):
		# get the page size
		x = self.driver.get_window_size()['width']
		y = self.driver.get_window_size()['height']
		return x,y
	
	def swipe_down(self):
		s = self.get_size()
		x1 = int(s[0]*0.5)
		y1 = int(s[1]*0.75)
		y2 = int(s[1]*0.2)
		self.driver.swipe(x1,y1,x1,y2)
		
	def test_page(self):
		status=None
		# go to the main menu
		meun_btn = self.driver.find_element_by_id("com.android.contacts:id/main_menu")
		meun_btn.click()
		time.sleep(2)
		# access to "9-Day Forecast page"
		i=0
		while i < 3:
			try:
				forecast_btn = self.driver.find_element_by_xpath("//*contains(@text,'9-Day Forecast')")
				forecast_btn.click()
				time.sleep(2)
				status="pass"
				# swipe the page
				for i in range(2)
					swipe_down()
					time.sleep(1)
				break
			except Exception as e:
				swipe_down()
				i += 1
			finally:
				if i == 3:
					status = "fail"
					logging.info("Can't find the element")
				# save the screenshot to the specspecified folder
				self.driver.get_screenshot_as_file('./screenshot/forecast_page_exits_%s.png' %status)
	
if __name__ == '__main__':
	suite = unittest.TestSuite()
    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(forecastPageTest))
	
	time_str = time.strftime("%Y%m%d%H%M%S")
	report_dir   = "./report"
	report_name = report_dir + '/' + 'forecast_page_test_report_' + time_str + '.html'

    with open(report_name, 'wb') as f:
        runner = HTMLTestRunner.HTMLTestRunner(stream=f,
                                title='Forecast Page Test Report',
                                description='generated by HTMLTestRunner',
                                verbosity=2
                                )
        runner.run(suite)
		f.close()
